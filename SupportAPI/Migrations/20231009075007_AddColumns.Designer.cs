// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SupportAPI.Helpers;

#nullable disable

namespace SupportAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231009075007_AddColumns")]
    partial class AddColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSentByAgent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FinishAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsNightShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverflow")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5"),
                            FinishAt = new DateTime(2023, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team A"
                        },
                        new
                        {
                            Id = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e"),
                            FinishAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team B"
                        },
                        new
                        {
                            Id = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec"),
                            FinishAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = true,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team C"
                        },
                        new
                        {
                            Id = new Guid("1199495b-9684-4ab3-84f3-d6ff04ac8d83"),
                            FinishAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = true,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Overflow Team"
                        });
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.HasBaseType("SupportAPI.Common.Entities.User");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<int>("Seniority")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Agent");

                    b.HasData(
                        new
                        {
                            Id = "35e2da7c-5be5-4fac-bfda-34f16d2ddfae",
                            IsOnline = false,
                            Seniority = 3,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "204dc8a8-0308-41ae-a562-5ce41b22d3b6",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "8963ec5b-a148-4539-9af5-f163df9e81a9",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "24452e08-d1ca-4474-8b5f-608d58e940ae",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "3ce43db3-c933-45c1-b0aa-632653be6bf4",
                            IsOnline = false,
                            Seniority = 2,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "b127260d-b07b-4c9d-b677-21d289d670a9",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "cb22d09b-bcc5-4087-ae17-8b530c001053",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "a8ac9a8e-536a-406e-ba65-547b85e2ea5d",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "66eec947-5794-4fb0-ad24-0ee911e99db7",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "8f0de4b9-55db-44d5-b2ba-026b279ca0e5",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "2cb60dbf-0a43-4c4d-bfd5-e64b0981ada4",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "f7933949-e974-483c-b0bb-db2357476614",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "e27d471c-8452-4a38-bd74-fe7d202c0949",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "040b4ef9-a356-4c80-9258-0edfc4671418",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "8856758a-03b7-4cfc-aabb-c99d81754de5",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "0d440313-9765-4a1b-abc9-4cc5057c734e",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        });
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Customer", b =>
                {
                    b.HasBaseType("SupportAPI.Common.Entities.User");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Agent", "Agent")
                        .WithMany("Chats")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportAPI.Common.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Message", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("SupportAPI.Common.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Team", "Team")
                        .WithMany("Agents")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Team", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
