// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SupportAPI.Helpers;

#nullable disable

namespace SupportAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231009020647_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSentByAgent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FinishAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsNightShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverflow")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5"),
                            FinishAt = new DateTime(2023, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team A"
                        },
                        new
                        {
                            Id = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e"),
                            FinishAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team B"
                        },
                        new
                        {
                            Id = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec"),
                            FinishAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = true,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team C"
                        },
                        new
                        {
                            Id = new Guid("1199495b-9684-4ab3-84f3-d6ff04ac8d83"),
                            FinishAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = true,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Overflow Team"
                        });
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.HasBaseType("SupportAPI.Common.Entities.User");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<int>("Seniority")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Agent");

                    b.HasData(
                        new
                        {
                            Id = "f2725869-d0ca-4e1a-b727-8b6703f03500",
                            IsOnline = false,
                            Seniority = 3,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "c50c9bd1-7edd-467b-9dfa-3ad81c2b3bf6",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "d778a514-dd74-475e-9d3e-eca34f2ca64a",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "75e52ee6-19a5-487d-bf88-206492c07b40",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "a16d2b08-a38f-466f-a77d-ebb8925e96dd",
                            IsOnline = false,
                            Seniority = 2,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "f1d69969-769c-4026-8576-1b68084fe53c",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "eb6194ea-db64-4707-bd5f-943c177e3eaa",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "afeb8a81-bb14-4e01-be0a-b76178706207",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "513b0828-85c1-492d-87e1-82d8cdc2b60c",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "66a597ce-11b8-46bd-82aa-c66be0eaebe7",
                            IsOnline = false,
                            Seniority = 1,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "e5cb49a2-48ab-4cea-bc63-d7a852dab249",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "252d0070-bf65-4fc5-bbed-246f1eacd215",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "c3cc282e-5fea-4c77-bba8-a1feaaccabc5",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "cc304533-a665-4d3a-8e72-f0d468db10f2",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "33c71dd8-fb53-4967-b162-6cbd7c7c2426",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "5d1f87a3-bce6-4bda-ae9b-8d2329c30745",
                            IsOnline = false,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        });
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Customer", b =>
                {
                    b.HasBaseType("SupportAPI.Common.Entities.User");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Agent", "Agent")
                        .WithMany("Chats")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportAPI.Common.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Message", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Team", "Team")
                        .WithMany("Agents")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Team", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
