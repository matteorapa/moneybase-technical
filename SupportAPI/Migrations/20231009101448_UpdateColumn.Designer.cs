// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SupportAPI.Helpers;

#nullable disable

namespace SupportAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231009101448_UpdateColumn")]
    partial class UpdateColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSentByAgent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FinishAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsNightShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverflow")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5"),
                            FinishAt = new DateTime(2023, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team A"
                        },
                        new
                        {
                            Id = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e"),
                            FinishAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team B"
                        },
                        new
                        {
                            Id = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec"),
                            FinishAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = true,
                            IsOnline = false,
                            IsOverflow = false,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Team C"
                        },
                        new
                        {
                            Id = new Guid("1199495b-9684-4ab3-84f3-d6ff04ac8d83"),
                            FinishAt = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IsNightShift = false,
                            IsOnline = false,
                            IsOverflow = true,
                            MaxCapacity = 0,
                            StartAt = new DateTime(2023, 12, 31, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamName = "Overflow Team"
                        });
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.HasBaseType("SupportAPI.Common.Entities.User");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<int>("Seniority")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("Agent");

                    b.HasData(
                        new
                        {
                            Id = "f5458084-a853-4064-aa2a-28128dd626e6",
                            IsOnline = true,
                            Seniority = 3,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "23c61fec-8327-42af-a8d3-db90b698b19e",
                            IsOnline = true,
                            Seniority = 1,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "f8bde202-3f29-4887-b0cb-c6dfb3dfb080",
                            IsOnline = true,
                            Seniority = 1,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "13767a1e-fede-4546-a13f-bb1ad270d7eb",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("e491ffff-b197-4cdf-859c-a103bdf63fc5")
                        },
                        new
                        {
                            Id = "00a3151a-d1e1-407f-8136-387c1a2ec905",
                            IsOnline = true,
                            Seniority = 2,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "ddf77590-b50f-42a9-b1e3-b69508fb52fa",
                            IsOnline = true,
                            Seniority = 1,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "013f277e-7fc1-44ee-a91f-ffbb50ba4865",
                            IsOnline = true,
                            Seniority = 1,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "3f7af996-1f5d-450b-957f-64a7a65ea64d",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("675d7017-f2f6-4460-9405-36bcf16fbc1e")
                        },
                        new
                        {
                            Id = "22ef2691-2a94-42a9-8089-867a1a4b2cb1",
                            IsOnline = true,
                            Seniority = 1,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "3123a1e5-2d96-4511-9a49-10adffdaec34",
                            IsOnline = true,
                            Seniority = 1,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "5e654f44-fbd6-45af-8905-74f36a3d6ba4",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "21010193-2943-494d-9a05-7214ca9d3b26",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "b7aafd67-7cd4-43d3-aba3-1fa737190668",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "a71e3f3f-f187-42af-8554-301267485a6a",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "f596ba69-f080-41ae-8040-45392468392a",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        },
                        new
                        {
                            Id = "0d1e3269-f508-49f9-a3ca-daaf3f746ca7",
                            IsOnline = true,
                            Seniority = 0,
                            TeamId = new Guid("e6f027fb-2f6d-4f45-8d95-a53f1e813bec")
                        });
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Customer", b =>
                {
                    b.HasBaseType("SupportAPI.Common.Entities.User");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = "3d2f8c6a-a206-4f99-a2ff-c5206c41741b",
                            AccountId = new Guid("7100d2c8-918f-4d12-809b-28995482d85d")
                        });
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Agent", "Agent")
                        .WithMany("Chats")
                        .HasForeignKey("AgentId");

                    b.HasOne("SupportAPI.Common.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Message", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("SupportAPI.Common.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.HasOne("SupportAPI.Common.Entities.Team", "Team")
                        .WithMany("Agents")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Team", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("SupportAPI.Common.Entities.Agent", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
